buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
}

plugins {
    id "org.ajoberstar.grgit" version "4.1.1"
    id 'net.saliman.cobertura' version "4.0.0"
    id "org.sonarqube" version "3.3"
    id 'com.github.kt3k.coveralls' version "2.12.0"

    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.springframework.boot" version "2.6.5"

    id "com.bmuschko.docker-spring-boot-application" version "7.3.0"
    id "com.bmuschko.docker-remote-api" version "6.7.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.sonarqube'
apply plugin: 'com.bmuschko.docker-spring-boot-application'

group = 'cnegrean'

springBoot {
    buildInfo {
        properties {
            artifact = 'spring-cloud-stream-kafka'
            version = '1.4.0-SNAPSHOT'
        }
    }
}

sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springCloudVersion = '2021.0.1'

    registryUrl='registry.hub.docker.com'

    dockerHubUrl = 'registry.hub.docker.com/cnegrean/springcloudstream-kafka-consumer-base-image'

    dockerImageShortName = 'spring-cloud-stream-kafka'
}

dependencies {
    implementation('org.springframework.cloud:spring-cloud-starter-stream-kafka')

    //Production ready features to help you monitor and manage your application
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    //Java Persistence API including spring-data-jpa, spring-orm and Hibernate
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    //Exposing Spring Data repositories over REST via spring-data-rest-webmvc
    implementation('org.springframework.boot:spring-boot-starter-data-rest')

    // Hypermedia as the Engine of Application State (HATEOAS)
    implementation('org.springframework.boot:spring-boot-starter-hateoas')

    //Instruct Jackson JSON serializer/deserializer to work with Java 8 Date & Time API
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.cloud:spring-cloud-stream-test-support')

    //Browsing Spring Data REST repositories in your browser
    runtimeOnly('org.springframework.data:spring-data-rest-hal-browser:3.3.9.RELEASE')

    //PostgreSQL jdbc driver
    runtimeOnly('org.postgresql:postgresql')

    //high-performance, production-quality JDBC connection pool
    runtimeOnly('com.zaxxer:HikariCP')

    //Flyway Database Migrations library
    runtimeOnly('org.flywaydb:flyway-core')

    testRuntimeOnly('com.h2database:h2') //H2 in-memory database for tests (with embedded support)
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

wrapper {
    gradleVersion = '7.4.1'
    distributionType = Wrapper.DistributionType.ALL
}


task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jacoco {
    toolVersion = "0.8.5"
}

sonarqube {
    properties {
      property "sonar.sources", "src/main/java/"
      property "sonar.projectKey", "cristinatech:spring-cloud-stream-kafka"
    }
}

jacocoTestReport {
    def coverageSourceDirs = ['src/main/java']
    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
    sourceDirectories.from = files(coverageSourceDirs)
}

build.dependsOn jacocoTestReport

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    saveAsFile = true
    sendToCoveralls = false
}

tasks.coveralls {
    onlyIf { System.env.'CI' }
}